== Install a GCC Compiler and Dev tools or the full Xcode tools suite == 
'''Advanced user note:''' Xcode/the GCC compiler is required on Snow Leopard/Lion. On some older versions of OS X, you could get away without it when installing Rails, as long as you weren't using MacPorts. Not so on Snow Leopard and beyond, unfortunately.

'''Special note for folks who upgraded to Snow Leopard:''' If you upgraded from an older version of OS X, and you have an older Xcode, '''you still need to reinstall it from your Snow Leopard DVD'''. (The SQLite gem does not compile with an older version of Xcode installed.) The steps below should work fine to upgrade it.

'''Note about the GCC compiler option:''' It's smaller and faster to download and install, yet contains all the necessary tools to run the rest of the stack. 

'''Steps for the GCC Compiler toolset:'''
* Go to https://github.com/kennethreitz/osx-gcc-installer.
* Download the pre-built binaries for your version of OS X (10.6 or 10.7).
* Double-click the package to begin the install process.
* Click Continue on Welcome screen.
* Click Continue to notification that you can install XCode over these tools whenever you'd like. 
* Click Continue to install these tools for all users.
* Click Install to install in standard location.
* Success!


'''Steps for XCode:'''
* Insert your Snow Leopard install DVD. ([[xcode]])
* Open "Optional Installs" folder.
* Double-click Xcode.mkpg. It will bring up a window titled "Install Xcode."
* Click "Continue" button at the Introduction screen.
* Click "Continue" button at the License screen.
* Click "Agree" button in the popup to agree to the license.
* Click "Continue" button at the Destination Select screen.
* Don't change the checkboxes. Click "Continue" button at the Installation Type screen.
* Click "Install" button to start installing.
* Enter your user password in the popup to REALLY start installing. It takes a while.
* Click "Close" button once you get "The installation was successful" on the Summary screen.

== Install git == 

It's an insult in British English, but git is also an awesome version control tool. Here's how you install it:

Go to [http://code.google.com/p/git-osx-installer/downloads/list?can=3&q=&sort=-uploaded&colspec=Filename+Summary+Uploaded+Size+DownloadCount this page on google code] and download the latest file ending in "-x86_64-leopard.dmg" (1.7.4.4 as of this writing). '''If you're at a workshop and you need this file, please ask a volunteer - we have it on a thumb drive!''' Once it's downloaded, double click to open. You'll see something like this:
<center>
[[File:Git-screenshot.png]]
</center>
Double-click the .pkg file to install. Once that's done, close all your open Terminal windows, and open a new one. Cut and paste the following into the new Terminal window:
<pre>
    git --version
</pre>
It should respond with something like "git version 1.7.4.4". 

==== Tell git who you are ====

* Open up a new Terminal window.
* <code>git config --global user.name "''Your Actual Name''"</code>
* <code>git config --global user.email "''Your Actual Email''"</code> (Must be same email you use to sign up for Heroku [see below]. Also must be accessible from the workshop.)

If this doesn't produce an error, congratulations! You have a successful install of git and you can move on to the next section.

You can confirm your git user settings by running the following command:
* <code>echo "Git user: `git config --get user.name` (`git config --get user.email`)"</code>

== Update SQLite3 ==

IF YOU ARE RUNNING OSX 10.5 LEOPARD you will need to update your SQLite3 libraries.

* Open up a new Terminal window.
<pre>
 cd /tmp
 wget http://www.sqlite.org/sqlite-autoconf-3070600.tar.gz (*Note: if your system doesn't have the wget command, substitute with curl)
 curl -O http://www.sqlite.org/sqlite-autoconf-3070600.tar.gz
 tar zxvf sqlite-autoconf-3070600.tar.gz 
 cd sqlite-autoconf-3070600
 ./configure && make && sudo make install
 cd ..
 rm -rf sqlite-autoconf-3070600*
</pre>

== Install and Set Up RVM (Ruby Version Manager) ==

==== Installing RVM ====

Open up a terminal window, and cut & paste the following:
<pre>
    bash < <(curl -k https://rvm.beginrescueend.com/install/rvm)
</pre>
This downloads and installs the latest version of RVM. It may take a little while. 

If you're behind a firewall, or the above command fails for some reason, try cutting & pasting this extra extra long version into your Terminal window instead. NOTE: you don't have to do both. If the shorter version completes normally, skip to "Setting up RVM."
<pre>
    mkdir -p ~/.rvm/src/ && cd ~/.rvm/src && rm -rf ./rvm/ && git clone --depth 1 http://github.com/wayneeseguin/rvm.git && cd rvm && ./install
</pre>

==== Setting up RVM ====

Open up a terminal window (or, using an open one is fine), and cut & paste each line separately with a return at the end of each line:
<pre>
    echo "[[ -s \"$HOME/.rvm/scripts/rvm\" ]] && . \"$HOME/.rvm/scripts/rvm\"" | cat >> ~/.bash_profile
    echo 'rvm_project_rvmrc_default=1' | cat >>  ~/.rvmrc
</pre>

Now close all your open Terminal windows, and then open a new one. Cut and paste the following into the new Terminal window:
<pre>
    type rvm | head -n1
</pre>
It should say "rvm is a function". If it does, congratulations! You have RVM installed and can move on to the next section.

== Install Ruby ==

Open up a new Terminal window, and cut & paste the following, with a return after each line. Note: the first one takes a while. When it's done, it will say something similar to "Install of ruby-1.9.2-p0 - #complete." Once it's done, paste in the second line.

<pre>
rvm install 1.9.2 -C --with-readline-dir=/usr/local,--build=x86_64-apple-darwin10
rvm --create 1.9.2@global
rvm --default 1.9.2@global
</pre>

*If you're having trouble with a "Error running 'make '" on Snow Leopard message try this work around: [http://bparanj.blogspot.com/2010/07/installing-ruby-192-using-rvm-on-snow.html]

== Install global gems ==

Open up a new Terminal window, and cut & paste the following, with a return after each line:

<pre>
rvm use @global
</pre>
(if this doesn't work, use the following, substituting your version of ruby with 1.9.2)
<pre>
rvm use 1.9.2@global
rvm install ruby-1.9.2-p290
</pre>
<pre>
gem install bundler --no-rdoc --no-ri
gem install rails --no-rdoc --no-ri
</pre>

== Install SQLite Firefox plugin ==
You'll need the latest version of the Firefox web browser. '''You may need to upgrade even if you already have Firefox installed.''' 

====If you already have Firefox====

Open it, and then go to the Firefox menu (top left of the screen). Select "About Mozilla Firefox."

[[File:Firefox-menu.png]]

You'll get a window, like the one below, that shows you what version of Firefox you have. Write down that number! 

[[File:Firefox-version.png]]

Now go to [http://www.mozilla.com/en-US/firefox/firefox.html the Firefox homepage] and see what the current version of Firefox is. If it's the same major version (such as 3.6 - you can ignore the third part of the number) then you're good. You don't need to upgrade.
If it's a different major version, then you need to upgrade. Download it from the Firefox homepage and double-click to install. '''If you're at a workshop and you need this file, please ask a volunteer. We may have it on a thumb drive and it'll save you a bunch of download time.'''

==== If you don't have Firefox yet ====

Go to [http://www.mozilla.com/en-US/firefox/firefox.html the Firefox homepage] and click the big download button. '''If you're at a workshop, please ask a volunteer to see if we have it on a thumb drive. It'll save you a bunch of download time.''' Once you have the file, double click and follow the instructions to install.

==== Install the SQLite Manager Firefox Plugin ====

Open Firefox, and then go to the Tools menu and select "Add-ons." Click the "Get Add-ons" button at the top. Enter "SQLite" where it says "Search all Add-ons." The first thing that comes up should be SQLite Manager. Click "Add to Firefox" and then follow the instructions to install it.

If you have trouble installing, double-check that your Firefox version is at least 3.6.

== Install KomodoEdit ==
We'll be using the KomodoEdit text editor during the workshop, though you are free to use a different editor if you prefer. It must be a plain-text editor, such as vi or Textmate. Microsoft Word and other word processing programs won't work. If in doubt, use KomodoEdit.

'''Installation steps:'''
* Download the [http://downloads.activestate.com/Komodo/releases/6.1.1/Komodo-Edit-6.1.1-7295-macosx-x86.dmg KomodoEdit installer]. '''If you're at a workshop and you need this file, ask a volunteer. We may have it on a thumb drive, which will save you a lot of download time.'''
* Double-click the file once it's downloaded.
* It will open an installer with a KomodoEdit icon and a picture of your Applications folder. Something like this:
[[File:Komodo-Edit-5.png]]
* Drag KomodoEdit into your Applications folder.
* Unmount the installer disk image by dragging it from your desktop to the trash.

== Create an ssh public key ==
You'll need one of these to create your Heroku account in the next section.
* Open up a new Terminal window. 
<pre>ssh-keygen -C "Your Actual Email" -t rsa</pre> (email should match git config setting)
* Hit enter to accept default location for ssh key.
* Hit enter to accept blank passphrase (if computer is shared with other people, as in a work laptop, you should create a passphrase). Hit enter again to accept blank passphrase (or enter passphrase again). 
* [[Output of ssh-keygen command]]
* Your brand-new public key is now stored at <code>~/.ssh/id_rsa.pub</code>.

== Create a Heroku Account ==
* http://heroku.com -> Sign Up -> enter email address (use the same email as you did with git and the ssh public key).
* Heroku will send you an activation email. Open it and click on the activation link. It will take you to the Heroku site. Enter and confirm your password. Hit Save.
* To Install the Heroku gem open up a new Terminal window
<pre>rvm use 1.9.2@global</pre>
<pre>gem install heroku --no-rdoc --no-ri</pre> ([[Output of heroku gem install]])
* Add SSH key to Heroku account:
<pre>heroku keys:add</pre>
* '''If you have further heroku issues, try following [http://support.heroku.com/forums/43117/entries/32505 these directions] to install (or re-install) the client.'''

== Verify you can create a new Rails app ==
Open a new Terminal and verify that you are running the right version of Rails. In Terminal: 

<pre>rails -v</pre>

It should say <code>Rails 3.0.7</code>. 


* Create a folder in your User directory <code>ruby_on_rails</code>
    cd ~/
    mkdir ruby_on_rails
* Open a new Terminal window and type the following with a return at the end of each line:
    cd ~/ruby_on_rails 
    rails new test_app
* The first command should produce no output. The second command's output is voluminous. :)
* Once that's finished, type the following in the Terminal window with a return at the end of each line:
    cd test_app
    bundle install
    rails server
If "rails server" starts up with no errors, you're golden! It'll look something like this:
<pre>
    => Booting WEBrick
    => Rails 3.0.0 application starting in development on http://0.0.0.0:3000
    => Call with -d to detach
    => Ctrl-C to shutdown server
    [2010-09-30 21:04:12] INFO  WEBrick 1.3.1
    [2010-09-30 21:04:12] INFO  ruby 1.9.2 (2010-08-18) [x86_64-darwin10.4.0]
    [2010-09-30 21:04:12] INFO  WEBrick::HTTPServer#start: pid=24805 port=3000
</pre>
If it does, congratulations! You've successfully installed Ruby AND Rails and started your server. ([[Ruby and Rails 3 Diagnostics|Here are some more diagnostics to try if it's not so smooth.]]) Let's check it in the browser.
* In your browser, go to http://localhost:3000 ([http://wiki.devchix.com/images/successful-rails-install.jpg screenshot of successful install])
* Back in the Terminal window where you ran <code>rails server</code>, type control-c to kill the server.

== Verify your database is set up ==
* Open a new Terminal window.
<pre>cd ~/ruby_on_rails/test_app
rails generate scaffold user name:string email:string address:text active:boolean
rake db:migrate
rails server</pre>
* Go to http://localhost:3000/users -> New user -> create a user to make sure we can save to db. (The window where you ran <code>rails server</code> will display debugging information as you do so.)
* In your Terminal window where you ran <code>rails server</code>, type control-c to kill the server.

== Verify git is working ==
* Open a new Terminal window.
* <code>cd ~/ruby_on_rails/test_app</code> 
* <code>git init</code> ([[Output of "git init" command]])
* <code>git add .</code> (Note the dot) (May get line ending warnings; safe to ignore.)
* <code>git commit -m "initial commit"</code> ([[Output of initial check-in]])
* <code>git log</code> (We're just checking to make sure it worked. Verify that it has the  right user and commit message.)

== Verify Heroku is set up ==
Be sure that you're in your app's directory by typing the following command into your terminal:

<code><pre>
cd ~/ruby_on_rails/test_app
</pre></code>

Add the following to your Gemfile so that Rails 3.1.0 can work with heroku:

<code><pre>
group :production do
  gem 'therubyracer-heroku', '0.8.1.pre3'
  gem 'pg'
end
</pre></code>

Then in your terminal, type the following command:

<code><pre>
bundle install
</pre></code>

If you're running into an issue with installing postgresql, you can update your gemset with the following command:

<code><pre>
bundle install --without production
</pre></code>

* Open a new Terminal window.

<pre>cd ~/ruby_on_rails/test_app

heroku create --stack bamboo-mri-1.9.2 </pre>

* It may ask: Enter your Heroku email address and password. ([[Output of heroku create command]])

* To verify that the <code>heroku create</code> completed successfully, do <code>git remote show</code> and see if the list includes <code>heroku</code>.
<pre>git push heroku master</pre>

* It may ask: "The authenticity of host 'heroku.com (75.101.145.87)' can't be established. RSA key fingerprint is 8b:48:5e:67:0e:c9:16:47:32:f2:87:0c:1f:c8:60:ad. Are you sure you want to continue connecting (yes/no)?" Type <code>yes</code> and hit enter.
* [[Output of successful first deploy]]. Be sure to find your Heroku application name in the output. ([[What to do if git seems stuck]])

<pre>heroku rake db:migrate</pre>

* Go to your application's URL. You'll need your Heroku application name. The URL for your app is <code>''application name''.heroku.com</code> - so with the example output in the previous step, it would be <code>floating-winter-18.heroku.com</code>. Verify you see the welcome page. To see the test_app, add <code> /users</code> to the end of the URL.  Leave this window open.

* If you're getting an error when you go to your Heroku application, run one more command

<pre>bundle exec rake assets:precompile</pre>

Be sure to commit your changes and push your changes to Heroku

== Almost there! ==

'''Find a volunteer and have them watch the next steps. If they work, get a sticker from them for your computer!'''
<pre>
 cd ~/ruby_on_rails
 curl -O https://raw.github.com/gist/1143443/f4db3f9aa41ebb0726b98fe783e01f02e0f5ba09/workshop_template.txt
 rails new suggestotron -m workshop_template.txt
 cd suggestotron
 rake cucumber
</pre>
After running this, the last few lines of output should look something like this: 
<code>11 scenarios (5 failed, 6 skipped)
84 steps (5 failed, 79 skipped)
0m0.998s
rake aborted!
Command failed with status (1): [bundle exec /Users/sasha/.rvm/rubies/ruby-...]

(See full trace by running task with --trace)
</code>

== Cleanup ==
Ok, there is one more step. You won't be using the test application in the workshop; we just created it to make sure everything was working. '''You should delete it now to reduce confusion during the workshop.''' Don't worry about losing information - you'll repeat all the steps tomorrow, but more slowly so you can better understand what's going on under the hood.
* Close Terminal
* In Finder go to your home directory and open "ruby_on_rails"
* Drag the test_app folder to the trash. Leave ruby_on_rails folder.
* Delete the app from Heroku. Go to https://heroku.com/myapps and then click on your app name. Scroll to the bottom of the page and click Destroy App.

== Congratulations! ==

You have everything you need to write a Ruby on Rails application. Cowabunga dude!
